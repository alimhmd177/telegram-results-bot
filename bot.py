#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ุจูุช ุชูุบุฑุงู ูุงุณุชุฎุฑุงุฌ ูุชุงุฆุฌ ุงูุทูุงุจ ูู ุจูุงุจุฉ ุฌุงูุนุฉ ุงูุจุญุฑ ุงูุฃุญูุฑ
"""

import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ุงุณุชุฎุฏุงู selenium scraper
from scraper_selenium import StudentPortalScraper
SCRAPER_TYPE = "selenium"
print("ุงุณุชุฎุฏุงู scraper_selenium")

# ุฅุนุฏุงุฏ ุงูุณุฌู
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class StudentBot:
    """ูุฆุฉ ุจูุช ุงูุชูุบุฑุงู"""
    
    def __init__(self, token):
        self.token = token
        logger.info(f"ุชู ุชููุฆุฉ ุงูุจูุช ุจุงุณุชุฎุฏุงู {SCRAPER_TYPE} scraper")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """ูุนุงูุฌ ุฃูุฑ /start"""
        welcome_message = """
๐ *ูุฑุญุจุงู ุจู ูู ุจูุช ูุชุงุฆุฌ ุงูุทูุงุจ*

ูุฐุง ุงูุจูุช ูุณุงุนุฏู ูู ุงูุญุตูู ุนูู ูุชุงุฆุฌู ุงูุฏุฑุงุณูุฉ ูู ุจูุงุจุฉ ุฌุงูุนุฉ ุงูุจุญุฑ ุงูุฃุญูุฑ.

*ุงูุฃูุงูุฑ ุงููุชุงุญุฉ:*
๐ /get_results - ููุญุตูู ุนูู ูุชุงุฆุฌู
โ /help - ูููุณุงุนุฏุฉ

*ููููุฉ ุงูุงุณุชุฎุฏุงู:*
1๏ธโฃ ุฃุฑุณู ุงูุฃูุฑ /get_results
2๏ธโฃ ุฃุฑุณู ุฑููู ุงูุฌุงูุนู
3๏ธโฃ ุฃุฑุณู ูููุฉ ุงููุฑูุฑ (ุงูุชุฑุงุถูุงู: 123456)

ุฃู ููููู ุฅุฑุณุงู ุฑููู ุงูุฌุงูุนู ูุจุงุดุฑุฉ!
        """
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """ูุนุงูุฌ ุฃูุฑ /help"""
        help_text = """
๐ *ุงููุณุงุนุฏุฉ*

*ุทุฑููุฉ ุงูุงุณุชุฎุฏุงู:*

*ุงูุทุฑููุฉ ุงูุฃููู (ุงูุณุฑูุนุฉ):*
ุฃุฑุณู ุฑููู ุงูุฌุงูุนู ูุจุงุดุฑุฉุ ูุณูุชู ุงุณุชุฎุฏุงู ูููุฉ ุงููุฑูุฑ ุงูุงูุชุฑุงุถูุฉ (123456)

ูุซุงู:
`1124693617`

*ุงูุทุฑููุฉ ุงูุซุงููุฉ (ูุน ูููุฉ ูุฑูุฑ ูุฎุตุตุฉ):*
ุฃุฑุณู ุงูุฑูู ุงูุฌุงูุนู ุซู ูููุฉ ุงููุฑูุฑ ููุตููุฉ ุจูุณุงูุฉ

ูุซุงู:
`1124693617 mypassword`

*ุงูุฃูุงูุฑ:*
/start - ุจุฏุก ุงูุจูุช
/get_results - ุงูุญุตูู ุนูู ุงููุชุงุฆุฌ
/help - ุนุฑุถ ุงููุณุงุนุฏุฉ

*ููุงุญุธุฉ:*
ูููุฉ ุงููุฑูุฑ ุงูุงูุชุฑุงุถูุฉ ูู: 123456
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def get_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """ูุนุงูุฌ ุฃูุฑ /get_results"""
        instructions = """
๐ *ููุญุตูู ุนูู ูุชุงุฆุฌู:*

ุฃุฑุณู ุฑููู ุงูุฌุงูุนู ุงูุขู.

ุฃู ุฃุฑุณู ุงูุฑูู ุงูุฌุงูุนู ููููุฉ ุงููุฑูุฑ ููุตููุฉ ุจูุณุงูุฉ:
`1124693617 123456`
        """
        await update.message.reply_text(instructions, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """ูุนุงูุฌ ุงูุฑุณุงุฆู ุงููุตูุฉ"""
        text = update.message.text.strip()
        
        # ุชุฌุงูู ุงูุฑุณุงุฆู ุงููุงุฑุบุฉ
        if not text:
            return
        
        # ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุชุธุงุฑ
        wait_msg = await update.message.reply_text("โณ ุฌุงุฑู ุชุณุฌูู ุงูุฏุฎูู ูุงุณุชุฎุฑุงุฌ ุงููุชุงุฆุฌ...\nูุฏ ูุณุชุบุฑู ูุฐุง ุจุถุน ุซูุงูู...")
        
        scraper = None
        try:
            # ุชุญููู ุงูุฑุณุงูุฉ
            parts = text.split()
            
            if len(parts) == 1:
                # ุฑูู ุฌุงูุนู ููุท
                student_id = parts[0]
                password = "123456"
            elif len(parts) == 2:
                # ุฑูู ุฌุงูุนู ููููุฉ ูุฑูุฑ
                student_id = parts[0]
                password = parts[1]
            else:
                await wait_msg.edit_text(
                    "โ ุชูุณูู ุฎุงุทุฆ!\n\n"
                    "ุฃุฑุณู ุฑููู ุงูุฌุงูุนู ููุทุ ุฃู:\n"
                    "`ุฑูู_ุฌุงูุนู ูููุฉ_ุงููุฑูุฑ`",
                    parse_mode='Markdown'
                )
                return
            
            # ุงูุชุญูู ูู ุตุญุฉ ุงูุฑูู ุงูุฌุงูุนู
            if not student_id.isdigit():
                await wait_msg.edit_text(
                    "โ ุงูุฑูู ุงูุฌุงูุนู ูุฌุจ ุฃู ูุญุชูู ุนูู ุฃุฑูุงู ููุท!"
                )
                return
            
            logger.info(f"ูุญุงููุฉ ุงุณุชุฎุฑุงุฌ ุจูุงูุงุช ุงูุทุงูุจ: {student_id}")
            
            # ุงุณุชุฎุฑุงุฌ ุงูุจูุงูุงุช
            scraper = StudentPortalScraper()
            data = scraper.get_all_data(student_id, password)
            
            # ุชูุณูู ูุฅุฑุณุงู ุงููุชูุฌุฉ
            message = scraper.format_results_message(data)
            await wait_msg.edit_text(message, parse_mode='Markdown')
            
            logger.info(f"ุชู ุฅุฑุณุงู ุงููุชุงุฆุฌ ููุทุงูุจ: {student_id}")
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ: {str(e)}", exc_info=True)
            await wait_msg.edit_text(
                f"โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงุณุชุฎุฑุงุฌ ุงูุจูุงูุงุช:\n{str(e)}\n\n"
                "ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ุฃู ุงูุชูุงุตู ูุน ุงูุฏุนู."
            )
        finally:
            # ุงูุชุฃูุฏ ูู ุฅุบูุงู ุงููุชุตูุญ ุฅุฐุง ูุงู selenium
            if scraper and SCRAPER_TYPE == "selenium":
                try:
                    scraper.close()
                except:
                    pass
    
    def run(self):
        """ุชุดุบูู ุงูุจูุช"""
        # ุฅูุดุงุก ุงูุชุทุจูู
        application = Application.builder().token(self.token).build()
        
        # ุฅุถุงูุฉ ูุนุงูุฌุงุช ุงูุฃูุงูุฑ
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("get_results", self.get_results))
        
        # ุฅุถุงูุฉ ูุนุงูุฌ ุงูุฑุณุงุฆู ุงููุตูุฉ
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # ุจุฏุก ุงูุจูุช
        logger.info("ุจุฏุก ุชุดุบูู ุงูุจูุช...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)


def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    # ุงูุญุตูู ุนูู ุชููู ุงูุจูุช ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("โ ุฎุทุฃ: ูู ูุชู ุงูุนุซูุฑ ุนูู TELEGRAM_BOT_TOKEN")
        print("ุงูุฑุฌุงุก ุชุนููู ุชููู ุงูุจูุช ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ:")
        print("export TELEGRAM_BOT_TOKEN='your_bot_token_here'")
        return
    
    # ุฅูุดุงุก ูุชุดุบูู ุงูุจูุช
    bot = StudentBot(token)
    bot.run()


if __name__ == "__main__":
    main()

